#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) return false;
    }
    return true;
}

int main() {
    int arr[10];
    cout << "Enter 10 integers: ";
    for (int i = 0; i < 10; ++i) {
        cin >> arr[i];
    }

    for (int i = 1; i <= 7; ++i) {
        pid_t pid = fork();

        if (pid < 0) {
            cerr << "Fork failed!" << endl;
            return 1;
        }
        else if (pid == 0) {
            // Child processes perform tasks based on their number
            switch(i) {
                case 1: {
                    int sum = 0;
                    for (int j = 0; j < 10; ++j) sum += arr[j];
                    cout << "1st Child: Sum of all numbers = " << sum << endl;
                    break;
                }
                case 2: {
                    int sumEven = 0;
                    for (int j = 0; j < 10; ++j) if (arr[j] % 2 == 0) sumEven += arr[j];
                    cout << "2nd Child: Sum of even numbers = " << sumEven << endl;
                    break;
                }
                case 3: {
                    int sumOdd = 0;
                    for (int j = 0; j < 10; ++j) if (arr[j] % 2 != 0) sumOdd += arr[j];
                    cout << "3rd Child: Sum of odd numbers = " << sumOdd << endl;
                    break;
                }
                case 4: {
                    int sumPrime = 0;
                    for (int j = 0; j < 10; ++j) if (isPrime(arr[j])) sumPrime += arr[j];
                    cout << "4th Child: Sum of prime numbers = " << sumPrime << endl;
                    break;
                }
                case 5: {
                    vector<int> sortedArr(arr, arr + 10);
                    sort(sortedArr.begin(), sortedArr.end());
                    cout << "5th Child: Array in ascending order: ";
                    for (int num : sortedArr) cout << num << " ";
                    cout << endl;
                    break;
                }
                case 6: {
                    int maxNum = arr[0];
                    for (int j = 1; j < 10; ++j) if (arr[j] > maxNum) maxNum = arr[j];
                    cout << "6th Child: Maximum number in the array = " << maxNum << endl;
                    break;
                }
                case 7: {
                    int searchNum;
                    cout << "7th Child: Enter number to search: ";
                    cin >> searchNum;
                    bool found = false;
                    for (int j = 0; j < 10; ++j) {
                        if (arr[j] == searchNum) {
                            cout << "7th Child: Number " << searchNum << " found at position " << j + 1 << endl;
                            found = true;
                            break;
                        }
                    }
                    if (!found) cout << "7th Child: Number " << searchNum << " not found in the array." << endl;
                    break;
                }
            }
            _exit(0);  
        }
    }

    // Parent process displays all elements
    wait(NULL);  // Wait for all child processes to finish
    cout << "Parent: The array elements are: ";
    for (int i = 0; i < 10; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Ensure all child processes finish before the program ends
    while (wait(NULL) > 0);

    return 0;
}





import java.util.Scanner;

public class PriorityPreemptive {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        // Input number of processes
        System.out.print("Enter the number of processes: ");
        int n = in.nextInt();

        int[] pid = new int[n], at = new int[n], bt = new int[n], rt = new int[n], priority = new int[n];
        int[] ct = new int[n], tat = new int[n], wt = new int[n];

        // Input process details
        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time of process " + (i + 1) + ": ");
            at[i] = in.nextInt();
            System.out.print("Enter burst time of process " + (i + 1) + ": ");
            bt[i] = in.nextInt();
            System.out.print("Enter priority of process " + (i + 1) + ": ");
            priority[i] = in.nextInt();
            rt[i] = bt[i];
            pid[i] = i + 1;
        }

        int currentTime = 0, completed = 0;

        while (completed < n) {
            int minIndex = -1;
            int highestPriority = Integer.MAX_VALUE;

            // Find the process with the highest priority available
            for (int i = 0; i < n; i++) {
                if (at[i] <= currentTime && rt[i] > 0 && priority[i] < highestPriority) {
                    highestPriority = priority[i];
                    minIndex = i;
                }
            }

            if (minIndex == -1) {
                currentTime++;
                continue;
            }

            rt[minIndex]--;
            currentTime++;

            if (rt[minIndex] == 0) {
                completed++;
                ct[minIndex] = currentTime;
                tat[minIndex] = ct[minIndex] - at[minIndex];
                wt[minIndex] = tat[minIndex] - bt[minIndex];
            }
        }

        // Output process details
        System.out.println("\nProcess Details:");
        System.out.println("Process\tAT\tBT\tPri\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], priority[i], ct[i], tat[i], wt[i]);
        }
    }
}







import java.util.Scanner;

public class SJFPreemptive {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        // Input number of processes
        System.out.print("Enter the number of processes: ");
        int n = in.nextInt();

        int[] pid = new int[n], at = new int[n], bt = new int[n], rt = new int[n];
        int[] ct = new int[n], tat = new int[n], wt = new int[n];

        // Input process details
        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time of process " + (i + 1) + ": ");
            at[i] = in.nextInt();
            System.out.print("Enter burst time of process " + (i + 1) + ": ");
            bt[i] = in.nextInt();
            rt[i] = bt[i];
            pid[i] = i + 1;
        }

        int currentTime = 0, completed = 0;

        while (completed < n) {
            int minIndex = -1;
            int minTime = Integer.MAX_VALUE;

            // Find shortest remaining time process available
            for (int i = 0; i < n; i++) {
                if (at[i] <= currentTime && rt[i] > 0 && rt[i] < minTime) {
                    minTime = rt[i];
                    minIndex = i;
                }
            }

            if (minIndex == -1) {
                currentTime++;
                continue;
            }

            rt[minIndex]--;
            currentTime++;

            if (rt[minIndex] == 0) {
                completed++;
                ct[minIndex] = currentTime;
                tat[minIndex] = ct[minIndex] - at[minIndex];
                wt[minIndex] = tat[minIndex] - bt[minIndex];
            }
        }

        // Output process details
        System.out.println("\nProcess\tAT\tBT\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.printf("P%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], ct[i], tat[i], wt[i]);
        }
    }
}







import java.util.Scanner;
public class RoundRobin{
	public static void main(String[]args){
		Scanner sc=new Scanner(System.in);
		
		System.out.println("enter the number of process");
		int n=sc.nextInt();
		
		System.out.println("enter the quantumn");
		int quantumn=sc.nextInt();
		
		int[]AT=new int[n];
		int[]process=new int[n];
		int[]BT=new int[n];
		int[]CT=new int[n];
		int[]WT=new int[n];
		int[]TAT=new int[n];
		int[]RT=new int[n];
		
		System.out.println("enter the average time and burst time for each loop");
		for(int i=0;i<n;i++){
			process[i]=i+1;
			
		System.out.println("\t process"+(i+1)+"Arrival time:");
		AT[i]=sc.nextInt();
		
		System.out.println("\t process"+(i+1)+"Burst time:");
		BT[i]=sc.nextInt();
		
		RT[i]=BT[i];
		}
		int time=0;
		int completed=0;
		
		while(completed<n){
	    boolean executed=false;
		for(int i=0;i<n;i++){
			if(AT[i]<=time&&RT[i]>0){
				executed =true;
			}
			if(RT[i]>quantumn){
				time+=quantumn;
				RT[i]-=quantumn;
			}
			
			else{
				time+=RT[i];
				RT[i]=0;
				CT[i]=time;
				TAT[i]=CT[i]-AT[i];
				WT[i]=TAT[i]-BT[i];
				completed++;
			}
		}
		}
		
/* if(!executed){
			time++;
		} */
		double TTAT=0;
		double TWT=0;
		for(int i=0;i<n;i++){
		TWT+=WT[i];
		TTAT+=TAT[i];
		}
		System.out.println("process\tAT\tBT\tCT\tTAT\tWT\tRT");
		for(int i=0;i<n;i++){
			System.out.println(process[i]+"\t"+AT[i]+"\t"+BT[i]+"\t"+CT[i]+"\t"+TAT[i]+"\t"+WT[i]+"\t"+RT[i]+"\t");
		}
		System.out.println("\n Average WT:"+(TWT/n));
		System.out.println("\n Average TAT:"+(TTAT/n));
	}
}






import java.util.Scanner;
public class FCF{
	public static void main(String[]args){
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number of process");
		
		int n=sc.nextInt();
		int[]process=new int[n];
		int[]AT=new int[n];
		int[]BT=new int[n];
		int[]CT=new int[n];
		int[]TAT=new int[n];
		int[]WT=new int[n];
		
		System.out.println("Enter the average time and burst time for each loop");
		for(int i=0;i<n;i++){
			process[i]=i+1;
			
			System.out.println("\t process"+(i+1)+"arrival time:");
			AT[i]=sc.nextInt();
			
			System.out.println("\t process"+(i+1)+"burst time:");
			BT[i]=sc.nextInt();
			System.out.println();
		}
		
		for(int i=0;i<n-1;i++){
			for(int j=i+1;j<n;j++){
				if(AT[i]>AT[j]){
					int temp=AT[i];
					AT[i]=AT[j];
					AT[j]=temp;
					
					temp=BT[i];
					BT[i]=BT[j];
					BT[j]=temp;
					
					temp=process[i];
					process[i]=process[j];
					process[j]=temp;
				}
			}
		}
		for(int i=1;i<n;i++){
			WT[i]=WT[i-1]+TAT[i-1];
			if(AT[i]>WT[i]){
				WT[i]=AT[i]-(WT[i-1]+TAT[i-1]);
			}
		}
			for(int i=0;i<n;i++){
			TAT[i]=WT[i];
		}
		
		for(int i=0;i<n;i++){
			CT[i]=AT[i]+TAT[i];
		}
		
		double TTAT=0;
		double TWT=0;
		for(int i=0;i<n;i++){
		TWT+=WT[i];
		TTAT+=TAT[i];
		}
		System.out.println("process\tAT\tBT\tCT\tTAT\tWT");
		for(int i=0;i<n;i++){
			System.out.println(process[i]+"\t"+AT[i]+"\t"+BT[i]+"\t"+CT[i]+"\t"+TAT[i]+"\t"+WT[i]+"\t");
		}
		System.out.println("\n Average WT:"+(TWT/n));
		System.out.println("\n Average TAT:"+(TTAT/n));
	}
}

